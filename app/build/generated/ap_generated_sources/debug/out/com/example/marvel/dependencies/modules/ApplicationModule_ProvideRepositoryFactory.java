// Generated by Dagger (https://dagger.dev).
package com.example.marvel.dependencies.modules;

import com.example.marvel.repository.Repository;
import com.example.marvel.repository.RepositoryImpl;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideRepositoryFactory implements Factory<Repository> {
  private final ApplicationModule module;

  private final Provider<RepositoryImpl> repositoryProvider;

  public ApplicationModule_ProvideRepositoryFactory(ApplicationModule module,
      Provider<RepositoryImpl> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public Repository get() {
    return provideRepository(module, repositoryProvider.get());
  }

  public static ApplicationModule_ProvideRepositoryFactory create(ApplicationModule module,
      Provider<RepositoryImpl> repositoryProvider) {
    return new ApplicationModule_ProvideRepositoryFactory(module, repositoryProvider);
  }

  public static Repository provideRepository(ApplicationModule instance,
      RepositoryImpl repository) {
    return Preconditions.checkNotNull(instance.provideRepository(repository), "Cannot return null from a non-@Nullable @Provides method");
  }
}
