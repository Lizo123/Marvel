// Generated by Dagger (https://dagger.dev).
package com.example.marvel.view.marvel_characters;

import com.example.marvel.usecases.GetAllCharactersUseCase;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CharactersActivityViewModel_Factory implements Factory<CharactersActivityViewModel> {
  private final Provider<GetAllCharactersUseCase> getAllCharactersUseCaseProvider;

  private final Provider<GetAllCharactersUseCase> getAllCharactersUseCaseProvider2;

  public CharactersActivityViewModel_Factory(
      Provider<GetAllCharactersUseCase> getAllCharactersUseCaseProvider,
      Provider<GetAllCharactersUseCase> getAllCharactersUseCaseProvider2) {
    this.getAllCharactersUseCaseProvider = getAllCharactersUseCaseProvider;
    this.getAllCharactersUseCaseProvider2 = getAllCharactersUseCaseProvider2;
  }

  @Override
  public CharactersActivityViewModel get() {
    CharactersActivityViewModel instance = newInstance(getAllCharactersUseCaseProvider.get());
    CharactersActivityViewModel_MembersInjector.injectGetAllCharactersUseCase(instance, getAllCharactersUseCaseProvider2.get());
    return instance;
  }

  public static CharactersActivityViewModel_Factory create(
      Provider<GetAllCharactersUseCase> getAllCharactersUseCaseProvider,
      Provider<GetAllCharactersUseCase> getAllCharactersUseCaseProvider2) {
    return new CharactersActivityViewModel_Factory(getAllCharactersUseCaseProvider, getAllCharactersUseCaseProvider2);
  }

  public static CharactersActivityViewModel newInstance(
      GetAllCharactersUseCase getAllCharactersUseCase) {
    return new CharactersActivityViewModel(getAllCharactersUseCase);
  }
}
