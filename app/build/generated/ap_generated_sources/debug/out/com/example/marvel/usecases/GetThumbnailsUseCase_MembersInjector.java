// Generated by Dagger (https://dagger.dev).
package com.example.marvel.usecases;

import com.example.marvel.rx.PostExecutionThread;
import com.example.marvel.rx.ThreadExecutor;
import dagger.MembersInjector;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetThumbnailsUseCase_MembersInjector implements MembersInjector<GetThumbnailsUseCase> {
  private final Provider<ThreadExecutor> threadExecutorProvider;

  private final Provider<PostExecutionThread> postExecutionThreadProvider;

  public GetThumbnailsUseCase_MembersInjector(Provider<ThreadExecutor> threadExecutorProvider,
      Provider<PostExecutionThread> postExecutionThreadProvider) {
    this.threadExecutorProvider = threadExecutorProvider;
    this.postExecutionThreadProvider = postExecutionThreadProvider;
  }

  public static MembersInjector<GetThumbnailsUseCase> create(
      Provider<ThreadExecutor> threadExecutorProvider,
      Provider<PostExecutionThread> postExecutionThreadProvider) {
    return new GetThumbnailsUseCase_MembersInjector(threadExecutorProvider, postExecutionThreadProvider);}

  @Override
  public void injectMembers(GetThumbnailsUseCase instance) {
    UseCase_MembersInjector.injectThreadExecutor(instance, threadExecutorProvider.get());
    UseCase_MembersInjector.injectPostExecutionThread(instance, postExecutionThreadProvider.get());
  }
}
