// Generated by Dagger (https://dagger.dev).
package com.example.marvel.usecases;

import com.example.marvel.rx.PostExecutionThread;
import com.example.marvel.rx.ThreadExecutor;
import dagger.MembersInjector;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCase_MembersInjector<T, Params> implements MembersInjector<UseCase<T, Params>> {
  private final Provider<ThreadExecutor> threadExecutorProvider;

  private final Provider<PostExecutionThread> postExecutionThreadProvider;

  public UseCase_MembersInjector(Provider<ThreadExecutor> threadExecutorProvider,
      Provider<PostExecutionThread> postExecutionThreadProvider) {
    this.threadExecutorProvider = threadExecutorProvider;
    this.postExecutionThreadProvider = postExecutionThreadProvider;
  }

  public static <T, Params> MembersInjector<UseCase<T, Params>> create(
      Provider<ThreadExecutor> threadExecutorProvider,
      Provider<PostExecutionThread> postExecutionThreadProvider) {
    return new UseCase_MembersInjector<T, Params>(threadExecutorProvider, postExecutionThreadProvider);}

  @Override
  public void injectMembers(UseCase<T, Params> instance) {
    injectThreadExecutor(instance, threadExecutorProvider.get());
    injectPostExecutionThread(instance, postExecutionThreadProvider.get());
  }

  public static <T, Params> void injectThreadExecutor(UseCase<T, Params> instance,
      ThreadExecutor threadExecutor) {
    instance.threadExecutor = threadExecutor;
  }

  public static <T, Params> void injectPostExecutionThread(UseCase<T, Params> instance,
      PostExecutionThread postExecutionThread) {
    instance.postExecutionThread = postExecutionThread;
  }
}
